# This file configures the static analysis results for your project (errors,
# warnings, and lints).
#
# This enables the 'recommended' set of lints from `package:lints`.
# This set helps identify many common issues to produce more readable and
# maintainable code. For more information, see
# https://flutter.dev/to/analysis-options.

include: package:flutter_lints/flutter.yaml

analyzer:
  # errors:
  #   # treat missing required parameters as a warning (not an error)
  #   missing_required_param: warning
  #   # treat missing returns as a warning (not an error)
  #   missing_return: warning
  #   # allow having TODOs in the code
  #   todo: ignore

  # exclude:
  #   - path/to/excluded/files/**

linter:
  # The lint rules are specified in `package:flutter_lints/flutter.yaml`.
  # You can customize the lint rules by specifying them in this file. A list
  # of all available lints can be found at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # To enable a lint, add it to the `rules` list below.
  #
  # rules:
  #   - always_declare_return_types
  #   - always_require_non_null_named_parameters
  #   - annotate_overrides
  #   - avoid_empty_else
  #   - avoid_function_literals_in_foreach_calls
  #   - avoid_init_to_null
  #   - avoid_null_checks_in_equality_operators
  #   - avoid_print
  #   - avoid_relative_lib_imports
  #   - avoid_return_types_on_setters
  #   - avoid_shadowing_type_parameters
  #   - avoid_single_cascade_in_expression_statements
  #   - avoid_types_as_parameter_names
  #   - avoid_unused_constructor_parameters
  #   - await_only_futures
  #   - camel_case_extensions
  #   - camel_case_types
  #   - cancel_subscriptions
  #   - cascade_invocations
  #   - close_sinks
  #   - comment_references
  #   - constant_identifier_names
  #   - control_flow_in_finally
  #   - curly_braces_in_flow_control_structures
  #   - directives_ordering
  #   - empty_catches
  #   - empty_constructor_bodies
  #   - empty_statements
  #   - exhaustive_cases
  #   - file_names
  #   - flutter_style_todos
  #   - hash_and_equals
  #   - implementation_imports
  #   - invariant_booleans
  #   - iterable_contains_unrelated_type
  #   - join_return_with_assignment
  #   - leading_newlines_in_multiline_strings
  #   - library_names
  #   - library_prefixes
  #   - list_remove_unrelated_type
  #   - no_duplicate_case_values
  #   - no_logic_in_create_state
  #   - non_constant_identifier_names
  #   - null_closures
  #   - omit_local_variable_types
  #   - overridden_fields
  #   - package_api_docs
  #   - package_names
  #   - package_prefixed_library_names
  #   - parameter_assignments
  #   - prefer_adjacent_string_concatenation
  #   - prefer_asserts_in_initializer_lists
  #   - prefer_collection_literals
  #   - prefer_conditional_assignment
  #   - prefer_const_constructors
  #   - prefer_const_constructors_in_immutables
  #   - prefer_const_declarations
  #   - prefer_const_literals_to_create_immutables
  #   - prefer_constructors_over_static_methods
  #   - prefer_contains
  #   - prefer_final_fields
  #   - prefer_final_in_for_each
  #   - prefer_final_locals
  #   - prefer_for_elements_to_map_fromIterable
  #   - prefer_function_declarations_over_variables
  #   - prefer_generic_function_type_aliases
  #   - prefer_if_elements_to_conditional_expressions
  #   - prefer_if_null_operators
  #   - prefer_initializing_formal_parameters
  #   - prefer_inlined_adds
  #   - prefer_is_empty
  #   - prefer_is_not_empty
  #   - prefer_is_not_operator
  #   - prefer_iterable_whereType
  #   - prefer_null_aware_operators
  #   - prefer_single_quotes
  #   - prefer_spread_collections
  #   - prefer_typing_uninitialized_variables
  #   - prefer_void_to_null
  #   - provide_deprecation_message
  #   - recursive_getters
  #   - slash_for_doc_comments
  #   - sort_child_properties_last
  #   - test_types_in_equals
  #   - throw_in_finally
  #   - type_annotate_public_apis
  #   - type_init_formals
  #   - unawaited_futures
  #   - unnecessary_brace_in_string_interps
  #   - unnecessary_const
  #   - unnecessary_getters_setters
  #   - unnecessary_lambdas
  #   - unnecessary_new
  #   - unnecessary_null_aware_assignments
  #   - unnecessary_null_in_if_null_operators
  #   - unnecessary_overrides
  #   - unnecessary_parenthesis
  #   - unnecessary_statements
  #   - unnecessary_string_escapes
  #   - unnecessary_string_interpolations
  #   - unnecessary_this
  #   - unrelated_type_equality_checks
  #   - unsafe_html
  #   - use_build_context_synchronously
  #   - use_full_hex_values_for_flutter_colors
  #   - use_function_type_syntax_for_parameters
  #   - use_key_in_widget_constructors
  #   - use_rethrow_when_possible
  #   - valid_regexps
  #   - void_checks
  #
  # For a full list of options, see
  # https://dart.dev/tools/analysis# customizing-static-analysis
  #
  # These are used by `flutter analyze` and the Dart analyzer.
  # It can be further configured by using an analysis_options.yaml file.
  # See https://flutter.dev/to/analysis-options for more information.
